version: "2"

services:
  etcd:
    image: quay.io/coreos/etcd
    command: etcd --initial-cluster-state new --listen-client-urls http://0.0.0.0:2379 --advertise-client-urls http://127.0.0.1:2379
    volumes:
      - "etcd-data:/default.etcd"
    environment:
      - ETCDCTL_API=3

  etcd_config:
    build:
      context: .
      dockerfile: ./Dockerfile-etcd-config
    volumes:
      - "etcd-data:/default.etcd"
    environment:
      - ETCDCTL_API=3
      - ETCDCTL_ENDPOINTS=etcd:2379
    depends_on:
      - etcd
    links:
      - etcd

  postgres:
    image: "postgres"
    volumes:
      - "db-data:/var/lib/postgresql/data/pgdata"
    environment:
      PGDATA: "/var/lib/postgresql/data/pgdata"
      POSTGRES_USER: "go_oauth2_server"
      POSTGRES_PASSWORD: ""
      POSTGRES_DB: "go_oauth2_server"
      POSTGRES_HOST_AUTH_METHOD: "trust"

  app:
    container_name: go_oauth2_server
    image: go-oauth2-server:latest
    depends_on:
      - etcd_config
      - postgres
    links:
      - etcd
      - postgres
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - "8080:8080"
    environment:
      ETCD_ENDPOINTS: "http://etcd:2379"
    command: [runserver]

  app_testdata:
    container_name: go_oauth2_server_testdata
    image: go-oauth2-server:latest
    build:
      context: .
      dockerfile: ./Dockerfile
    environment:
      ETCD_ENDPOINTS: "http://etcd:2379"
    depends_on:
      - etcd_config
      - postgres
    links:
      - etcd
      - postgres
    command: ["loaddata", "oauth/fixtures/test_clients.yml"]
#
#  postgres:
#    container_name: pg_container
#    image: postgres:11.16-alpine
#    volumes:
#      - 'pg_data:/var/lib/postgresql/data'
#    restart: always
#    ports:
#      - 5432:5432
#    environment:
#      POSTGRES_USER: admin
#      POSTGRES_PASSWORD: admin
#      POSTGRES_DB: go_microservice_template

  zookeeper:
    image: bitnami/zookeeper
    ports:
      - 2181:2181
    hostname: zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'true'

  kafka:
    image: bitnami/kafka
    ports:
      - 9092:9092
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
    #      KAFKA_CFG_LISTENERS: 'PLAINTEXT://:9092'
    #      KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://:9092'
    #      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - kafka

volumes:
  etcd-data:
  db-data:
  pg_data:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
